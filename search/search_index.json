{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VGG Automerge A C++ implementation of automerge , at an early stage. Updated to commit . Some components are under working listed as below: text data type history related APIs OpObserver sync methods exceptions test cases benchmark Advantage Added several new APIs, users can operate an Automerge doc like a json object, which supported by nlohmann::json . json json_obj = json::parse(R\"({ \"todo\": [ { \"title\": \"work A\", \"done\": false }, { \"title\": \"work B\", \"done\": true } ] })\"); // from_json Automerge automerge_doc = json_obj.get<Automerge>(); // to_json json new_json_obj = automerge_doc; assert(new_json_obj == json_obj); // json_add json work_C = { {\"title\", \"work C\"}, {\"done\", false} }; automerge_doc.json_add(\"/todo/0\"_json_pointer, work_C); automerge_doc.commit(); // json_replace automerge_doc.json_replace(\"/todo/1/done\"_json_pointer, true); automerge_doc.commit(); // json_delete automerge_doc.json_delete(\"/todo/2\"_json_pointer); automerge_doc.commit(); assert(json(automerge_doc) == json::parse(R\"({ \"todo\": [ { \"title\": \"work C\", \"done\": false }, { \"title\": \"work A\", \"done\": true } ] })\")); Usage list cmake --list-presets=all . configure cmake --preset <configurePreset> , where <configurePreset> is the name of the active Configure Preset. build cmake --build out/build/<configurePreset> or cmake --build --preset <buildPreset> , where <buildPreset> is the name of the active Build Preset. Thanks Thanks to automerge contributors' awesome work.","title":"Home"},{"location":"#vgg-automerge","text":"A C++ implementation of automerge , at an early stage. Updated to commit . Some components are under working listed as below: text data type history related APIs OpObserver sync methods exceptions test cases benchmark","title":"VGG Automerge"},{"location":"#advantage","text":"Added several new APIs, users can operate an Automerge doc like a json object, which supported by nlohmann::json . json json_obj = json::parse(R\"({ \"todo\": [ { \"title\": \"work A\", \"done\": false }, { \"title\": \"work B\", \"done\": true } ] })\"); // from_json Automerge automerge_doc = json_obj.get<Automerge>(); // to_json json new_json_obj = automerge_doc; assert(new_json_obj == json_obj); // json_add json work_C = { {\"title\", \"work C\"}, {\"done\", false} }; automerge_doc.json_add(\"/todo/0\"_json_pointer, work_C); automerge_doc.commit(); // json_replace automerge_doc.json_replace(\"/todo/1/done\"_json_pointer, true); automerge_doc.commit(); // json_delete automerge_doc.json_delete(\"/todo/2\"_json_pointer); automerge_doc.commit(); assert(json(automerge_doc) == json::parse(R\"({ \"todo\": [ { \"title\": \"work C\", \"done\": false }, { \"title\": \"work A\", \"done\": true } ] })\"));","title":"Advantage"},{"location":"#usage","text":"list cmake --list-presets=all . configure cmake --preset <configurePreset> , where <configurePreset> is the name of the active Configure Preset. build cmake --build out/build/<configurePreset> or cmake --build --preset <buildPreset> , where <buildPreset> is the name of the active Build Preset.","title":"Usage"},{"location":"#thanks","text":"Thanks to automerge contributors' awesome work.","title":"Thanks"},{"location":"api/","text":"API Prerequisites What is JSON pointer? https://jsonpatch.com/#json-pointer class Automerge methods void json_add(const json::json_pointer& path, const json& value) @brief add a new item with a new path, the parent path should exist @param[in] path A json path @param[in] value Json value to be added at the path @throw @note commit() should be called manually after this operation void json_replace(const json::json_pointer& path, const json& value) @brief replace an item at an existed path @param[in] path A json path @param[in] value Json value to be replaced at the path @throw @note commit() should be called manually after this operation. The original item will be replaced by the new item entirely. No diff operating internal. Change several items in an object, should call replace() separately for each item. void json_delete(const json::json_pointer& path) @brief delete a item(scalar or object) of an existed path @param[in] path A json path @throw @note commit() should be called manually after this operation void commit() @brief commit a batch of operations together in a transaction @note A user operation usually contains several Automerge operations. commit() should be called after all add/replace/delete operations applied of one user operation.","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#prerequisites","text":"What is JSON pointer? https://jsonpatch.com/#json-pointer","title":"Prerequisites"},{"location":"api/#class-automerge","text":"","title":"class Automerge"},{"location":"api/#methods","text":"void json_add(const json::json_pointer& path, const json& value) @brief add a new item with a new path, the parent path should exist @param[in] path A json path @param[in] value Json value to be added at the path @throw @note commit() should be called manually after this operation void json_replace(const json::json_pointer& path, const json& value) @brief replace an item at an existed path @param[in] path A json path @param[in] value Json value to be replaced at the path @throw @note commit() should be called manually after this operation. The original item will be replaced by the new item entirely. No diff operating internal. Change several items in an object, should call replace() separately for each item. void json_delete(const json::json_pointer& path) @brief delete a item(scalar or object) of an existed path @param[in] path A json path @throw @note commit() should be called manually after this operation void commit() @brief commit a batch of operations together in a transaction @note A user operation usually contains several Automerge operations. commit() should be called after all add/replace/delete operations applied of one user operation.","title":"methods"}]}